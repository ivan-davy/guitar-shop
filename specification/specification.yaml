openapi: 3.0.0
info:
  version: '1.0'
  title: API сервер для администраторского интерфейса guitar-shop.
  description: |-
    * Список ресурсов и маршрутов сервера guitar-shop.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT


tags:
  - name: offers
    description: Действия с товарами.
  - name: users
    description: Действия с пользователями.

paths:
  /offers:
    get:
      tags:
        - offers
      parameters:
        - in: query
          name: page
          required: false
          schema:
            type: integer
            minimum: 1
        - in: query
          name: type
          required: false
          schema:
            type: array
            items:
              type: string
              enum:
                - Acoustic
                - Electric
                - Ukulele
        - in: query
          name: strings
          required: false
          schema:
            type: array
            items:
              type: number
              enum:
                - 4
                - 6
                - 7
                - 12
        - in: query
          name: sortBy
          required: false
          schema:
            type: string
            enum:
              - postedDate
              - price
        - in: query
          name: sortDirection
          required: false
          schema:
            type: number
            enum:
              - -1
              - 1

      responses:
        "200":
          description: Объекты товаров и номер текущей страницы.
          content:
            application/json:
              schema:
                type: object

                properties:
                  offers:
                    type: array
                    items:
                      $ref: '#/components/schemas/offer-res'

                  totalOfferQty:
                    type: number
                    example: 3

        "498":
          description: Неверный токен.

    post:
      tags:
        - offers
      summary: Создание нового товара
      description: Создает новый товар по данным, введенным пользователем. Доступно только администратору.

      requestBody:
        description: Информация для создания товара.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/new-offer-req'
        required: true

      responses:
        "201":
          description: Товар создан. Объект товара.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/offer-res'

        "400":
          description: Товар не прошел валидацию.

        "401":
          description: Пользователь не авторизован.

        "498":
          description: Неверный токен.

  /offers/{offerId}:
    parameters:
      - in: path
        name: offerId
        required: true
        schema:
          type: string

    get:
      tags:
        - offers
      summary: Получение информации о конкретном товаре.
      description: Запрос полной информации о конкретном товаре.

      responses:
        "200":
          description: Объект товара.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/offer-res'

        "404":
          description: Товар не найден.


    patch:
      tags:
        - offers
      summary: Редактирование существующего товара.
      description: Редактирует существующий товар. Только для администратора.

      requestBody:
        description: Информация для редактирования товара. Не обязательно предоставлять все свойства.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/new-offer-req'
        required: true

      responses:
        "200":
          description: Товар отредактирован. Объект товара.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/offer-res'

        "400":
          description: Данные о товаре не прошли валидацию.

        "401":
          description: Пользователь не авторизован.

        "404":
          description: Товар не найден.

        "498":
          description: Неверный токен.

    delete:
      tags:
        - offers
      summary: Удаление товара.
      description: Удаляет товар. Только для администратора.

      responses:
        "200":
          description: Товар удален.

        "401":
          description: Пользователь не авторизован.

        "404":
          description: Товар не найден.

        "498":
          description: Неверный токен.

  /offers/{offerId}/image:
    parameters:
    - in: path
      name: offerId
      required: true
      schema:
        type: string

    post:
      tags:
        - users
      summary: Загрузка картинки для товара.
      description: Загружает картинку для товара пользователя (.png, .jpg).

      responses:
        "201":
          description: Успешная загрузка файла аватара.

        "401":
          description: Пользователь не авторизован.

        "498":
          description: Неверный токен.

  /users/register:
    post:
      tags:
        - users
      summary: Регистрация пользователя.
      description: Регистрирует нового пользователя.

      requestBody:
        description: Информация для создания нового пользователя.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/new-user-req'
        required: true

      responses:
        "201":
          description: Пользователь зарегистрирован. Объект пользователя.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user-login-res'

        "409":
          description: Пользователь с таким адресом почты уже зарегестрирован.

        "498":
          description: Неверный токен.


  /users/login:
    get:
      tags:
        - users
      summary: Проверка токена / состояния пользователя
      description: Возвращает информацию по статусу авторизации. Токен передается в Authorization-header.

      responses:
        "200":
          description: Пользователь авторизован. Данные и токен пользователя.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user-check-res'

        "498":
          description: Неверный токен.

    post:
      tags:
        - users
      summary: Аунтефикация пользователя.
      description: Аунтефицирует пользователя по логину и паролю. Только для неавторизованных пользователей.

      requestBody:
        description: Информация для аунтефикации.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user-login-req'
        required: true

      responses:
        "200":
          description: Успешная аунтефикация. Токен пользователя.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user-login-res'

        "403":
          description: Неверные данные входа.

        "498":
          description: Неверный токен.

components:
  schemas:
    offer-res:
      type: object

      properties:
        id:
          type: string
          example: dfkgj5kqwoewlfbb4

        name:
          type: string
          minLength: 10
          maxLength: 100
          example: Имя гитары

        postedDate:
          type: string
          format: date-time
          example: 2030-04-06T08:45:40.283Z

        image:
          type: string
          example: j42inv4aspdhhjjd35.png
          description: .png / .jpg only

        type:
          type: string
          enum:
            - Acoustic
            - Electric
            - Ukulele
          example: Acoustic

        vendorCode:
          type: string
          minLength: 5
          maxLength: 40
          example: IOGHJO9GGDXA5-GKR642

        strings:
          type: number
          enum:
            - 4
            - 6
            - 7
            - 12
          example: 6
          description: Depends on guitar type (consult with documentation)

        price:
          type: number
          example: 67500
          minimum: 100
          maximum: 1000000

    new-offer-req:
      type: object

      properties:
        name:
          type: string
          minLength: 10
          maxLength: 100
          example: Имя гитары

        postedDate:
          type: string
          format: date-time
          example: 2030-04-06T08:45:40.283Z

        image:
          type: string
          example: j42inv4aspdhhjjd35.png
          description: .png / .jpg only

        type:
          type: string
          enum:
            - Acoustic
            - Electric
            - Ukulele
          example: Acoustic

        vendorCode:
          type: string
          minLength: 5
          maxLength: 40
          example: IOGHJO9GGDXA5-GKR642

        strings:
          type: number
          enum:
            - 4
            - 6
            - 7
            - 12
          example: 6
          description: Depends on guitar type (consult with documentation)

        price:
          type: number
          example: 67500
          minimum: 100
          maximum: 1000000

    user-login-res:
      type: object

      properties:
        id:
          type: string
          example: ghjoui3h4pkdjfpjokgk
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiJ9.eyJlbWFpbCI6InRvcmFuczZAb3Zlcmxvb2submV0IiwiaWQiOiI2M2RiZThkNjM5MmFlNmI3OWFhOWJmMGUiLCJpYXQiOjE2NzU0NDkxNjMsImV4cCI6MTY3NTYyMTk2M30.HZIAsFYCmZgXbTp4SyIUcfpHkCv-PR75mZsHM9-dOMQ
          description: JWT
        email:
          type: string
          format: email
          example: keksissimo@mail.com
        name:
          type: string
          minLength: 1
          maxLength: 15
          example: Keks
        hasAdminRights:
          type: boolean
          example: true
          description: Describes whether the user is an admin

    user-check-res:
      type: object

      properties:
        id:
          type: string
          example: ghjoui3h4pkdjfpjokgk
        email:
          type: string
          format: email
          example: keksissimo@mail.com
        name:
          type: string
          minLength: 1
          maxLength: 15
          example: Keks
        hasAdminRights:
          type: boolean
          example: true
          description: Describes whether the user is an admin

    user-login-req:
      type: object

      properties:
        email:
          type: string
          format: email
          example: keksissimo@mail.com
        password:
          type: string
          minLength: 6
          maxLength: 12
          format: password
          example: 12345678

    new-user-req:
      type: object

      properties:
        email:
          type: string
          format: email
          example: keksissimo@mail.com
        name:
          type: string
          minLength: 1
          maxLength: 15
          example: Keks
        password:
          type: string
          minLength: 6
          maxLength: 12
          format: password
          example: 12345678
